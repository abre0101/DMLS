<?php

namespace App\Http\Controllers;

use App\Models\Report;
use Illuminate\Http\Request;
use PDF;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class ReportController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth'); // Ensure only authenticated users access this controller
    }

  
public function index(Request $request)
{
    $search = $request->input('search');
    $status = $request->input('status');

    $reports = Report::with(['document', 'user'])
        ->when($search, function ($query, $search) {
            return $query->whereHas('document', function ($query) use ($search) {
                $query->where('title', 'like', "%$search%");
            });
        })
        ->when($status, function ($query, $status) {
            return $query->where('status', $status);
        })
        ->paginate(10);

    // Redirect based on role
    if (auth()->user()->hasRole('admin')) {
        return redirect()->route('admin.reports');
    } elseif (auth()->user()->hasRole('director')) {
        return redirect()->route('director.reportsOverview');
    }

    return redirect()->back()->with('error', 'Unauthorized access');
}



    /**
     * Export reports in PDF or CSV format
     */
    public function export($format)
    {
        $data = Report::with(['document', 'generatedBy'])->get();

        if ($format === 'pdf') {
            $pdf = PDF::loadView('director.export', compact('data'));
            return $pdf->download('report.pdf');
        }

        if ($format === 'csv') {
            return $this->exportCsv($data);
        }

        return redirect()->back()->with('error', 'Invalid export format.');
    }

    /**
     * Export data to CSV
     */
    protected function exportCsv($data)
    {
        $filename = 'report.csv';
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename={$filename}",
        ];

        $callback = function () use ($data) {
            $handle = fopen('php://output', 'w');
            fputcsv($handle, ['Title', 'Status', 'Document Title', 'Generated By', 'Created At']);

            foreach ($data as $item) {
                fputcsv($handle, [
                    $item->title,
                    ucfirst($item->status),
                    optional($item->document)->title ?? 'N/A',
                    optional($item->generatedBy)->name ?? 'N/A',
                    $item->created_at->format('Y-m-d H:i'),
                ]);
            }

            fclose($handle);
        };

        return response()->stream($callback, 200, $headers);
    }

    /**
     * Display reports created this week
     */
    public function weeklyReport()
    {
        $startOfWeek = Carbon::now()->startOfWeek();
        $endOfWeek = Carbon::now()->endOfWeek();

        $reports = Report::whereBetween('created_at', [$startOfWeek, $endOfWeek])->get();

        return view('reports.weekly', compact('reports', 'startOfWeek', 'endOfWeek'));
    }

    /**
     * Display reports created this month
     */
    public function monthlyReport()
    {
        $startOfMonth = Carbon::now()->startOfMonth();
        $endOfMonth = Carbon::now()->endOfMonth();

        $reports = Report::whereBetween('created_at', [$startOfMonth, $endOfMonth])->get();

        return view('reports.monthly', compact('reports', 'startOfMonth', 'endOfMonth'));
    }

    /**
     * Approve a report
     */
  public function approve($id)
{
    $report = Report::findOrFail($id);
    $report->status = 'approved';
    $report->save();

    return redirect()->back()->with('success', 'Report approved.');
}


    /**
     * Reject a report
     */
    public function reject($id)
    {
        $report = Report::findOrFail($id);

        if (Auth::user()->cannot('reject', $report)) {
            return redirect()->route('reports.index')->with('error', 'You do not have permission to reject this report.');
        }

        $report->status = 'rejected';
        $report->save();

       return redirect()->route('admin.reports')->with('error', 'Report rejected successfully.');

    }
    public function show($id)
{
    // Fetch the report by ID
    $report = Report::findOrFail($id);

    // Return the view for the report details
    return view('reports.show', compact('report'));
}

}
